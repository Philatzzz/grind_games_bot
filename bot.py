from telegram import Update, InputMediaPhoto, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
import sqlite3
import os
import configparser
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
ACCOUNT_INFO = 0
ADMIN_DB_FILE = "admins.db"
SQLITE_TIMEOUT = 10
MEDIA_GROUP_DELAY = 1.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
ACCOUNT_INFO = 0
ADMIN_DB_FILE = "admins.db"
SQLITE_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ë–î

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
REVIEW_PHOTOS = [
    "AgACAgIAAxkBAAICO2hs9wABZdRD-__U8VkQ4-sGQatUMQACKvcxG2gAAWlLHUTK0lkjfD0BAAMCAAN5AAM2BA",
    "AgACAgIAAxkBAAICPWhs9wVRoEb4YYMCnB3WAUFnKjLPAAIs9zEbaAABaUvP67RaQkhiJgEAAwIAA3kAAzYE"
]
REVIEW_KEYBOARD = [["üìä Bewertungen"]]
REVIEW_MARKUP = ReplyKeyboardMarkup(REVIEW_KEYBOARD, resize_keyboard=True, one_time_keyboard=False)

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
config.read('config.ini')
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or config.get('BOT', 'TOKEN', fallback=None)
FIRST_ADMIN_ID = os.getenv("FIRST_ADMIN_ID") or config.get('BOT', 'FIRST_ADMIN_ID', fallback=None)
ADMIN_GROUP_ID = os.getenv("ADMIN_GROUP_ID") or config.get('BOT', 'ADMIN_GROUP_ID', fallback=None)

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏–ª–∏ –≤ config.ini.")
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
def get_conn(db_file):
    return sqlite3.connect(db_file, timeout=SQLITE_TIMEOUT)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_accounts_db():
    conn = get_conn('accounts.db')
    conn.execute('PRAGMA journal_mode=WAL;')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS accounts (
                 id INTEGER PRIMARY KEY, 
                 user_id INTEGER, 
                 username TEXT,
                 account_info TEXT, 
                 status TEXT DEFAULT 'new',
                 admin_chat_id INTEGER,
                 topic_id INTEGER,
                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    c.execute('''CREATE TABLE IF NOT EXISTS messages (
                 id INTEGER PRIMARY KEY, 
                 account_id INTEGER,
                 from_admin BOOLEAN, 
                 message_text TEXT,
                 timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

def init_admins_db():
    conn = get_conn(ADMIN_DB_FILE)
    conn.execute('PRAGMA journal_mode=WAL;')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS admins (
                 id INTEGER PRIMARY KEY, 
                 chat_id INTEGER UNIQUE)''')
    conn.commit()
    conn.close()
    if FIRST_ADMIN_ID:
        try:
            add_admin(int(FIRST_ADMIN_ID))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å FIRST_ADMIN_ID: {e}")

def add_admin(chat_id):
    conn = get_conn(ADMIN_DB_FILE)
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (chat_id,))
    conn.commit()
    conn.close()

def is_admin(chat_id):
    try:
        conn = get_conn(ADMIN_DB_FILE)
        c = conn.cursor()
        c.execute("SELECT 1 FROM admins WHERE chat_id = ?", (chat_id,))
        exists = c.fetchone() is not None
        return exists
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return False
    finally:
        if conn:
            conn.close()

def save_account(user_id, username, info):
    try:
        conn = get_conn('accounts.db')
        c = conn.cursor()
        c.execute("INSERT INTO accounts (user_id, username, account_info) VALUES (?, ?, ?)",
                (user_id, username, info))
        conn.commit()
        account_id = c.lastrowid
        return account_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None
    finally:
        if conn:
            conn.close()

def save_message(account_id, from_admin, text):
    try:
        conn = get_conn('accounts.db')
        c = conn.cursor()
        c.execute("INSERT INTO messages (account_id, from_admin, message_text) VALUES (?, ?, ?)",
                (account_id, int(from_admin), text))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()

def get_account_by_topic(topic_id):
    try:
        conn = get_conn('accounts.db')
        c = conn.cursor()
        c.execute("SELECT * FROM accounts WHERE topic_id = ?", (topic_id,))
        return c.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ —Ç–æ–ø–∏–∫—É: {e}")
        return None
    finally:
        if conn:
            conn.close()

def get_active_account(user_id):
    try:
        conn = get_conn('accounts.db')
        c = conn.cursor()
        c.execute("SELECT id, admin_chat_id, topic_id FROM accounts WHERE user_id = ? AND admin_chat_id IS NOT NULL", (user_id,))
        return c.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None
    finally:
        if conn:
            conn.close()

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤
async def account_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        u = update.message.from_user
        user_info = f"@{u.username}" if u.username else f"{u.first_name} {u.last_name or ''}"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        photos = [photo.file_id for photo in update.message.photo]
        caption = update.message.caption or ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ ALBUM:[file_id1,file_id2,...]:caption
        album_data = f"ALBUM:{','.join(photos)}:{caption}"
        account_id = save_account(u.id, user_info, album_data)
        
        if not account_id:
            await update.message.reply_text("‚ùå Fehler bei der Bearbeitung der Anfrage. Versuchen Sie es sp√§ter noch einmal.")
            return ConversationHandler.END
        
        await update.message.reply_text("‚úÖ Ich danke Dir! Bitte warte auf die Antwort des Administrators.")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫
        topic_id = await create_support_topic(
            context,
            account_id,
            user_info,
            album_data
        )
        
        if not topic_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{account_id}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ account_album: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∞–ª—å–±–æ–º–∞")
        return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
async def create_support_topic(context, account_id, user_info, account_info):
    if not ADMIN_GROUP_ID:
        logger.error("ADMIN_GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω! –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫.")
        return None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ –≤ –≥—Ä—É–ø–ø–µ
        topic_name = f"Request #{account_id}: {user_info[:20]}"
        topic = await context.bot.create_forum_topic(
            chat_id=ADMIN_GROUP_ID,
            name=topic_name
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–ø–∏–∫–∞ –≤ –±–∞–∑—É
        conn = get_conn('accounts.db')
        c = conn.cursor()
        c.execute("UPDATE accounts SET admin_chat_id = ?, topic_id = ? WHERE id = ?", 
                (ADMIN_GROUP_ID, topic.message_thread_id, account_id))
        conn.commit()
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if account_info.startswith("PHOTO:"):
            parts = account_info.split(':', 2)
            file_id = parts[1]
            caption = parts[2] if len(parts) > 2 else ""
            
            photo_caption = (
                f"‚ö†Ô∏è New info #{account_id}\n"
                f"üë§ User: {user_info}\n"
            )
            
            if caption:
                photo_caption += f"üìù Info: {caption}"
            
            await context.bot.send_photo(
                chat_id=ADMIN_GROUP_ID,
                photo=file_id,
                caption=photo_caption,
                message_thread_id=topic.message_thread_id
            )
        else:
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"‚ö†Ô∏è New info #{account_id}\n"
                f"üë§ User: {user_info}\n"
                f"üìù Info:\n{account_info}"
            )
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=message_text,
                message_thread_id=topic.message_thread_id
            )
        
        return topic.message_thread_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞: {e}")
        return None

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text(
            "Grind-Games ist die f√ºhrende deutsche Seite f√ºr den An- und Verkauf von Fortnite Accounts. "
            "Unser Ziel ist es, jedem User ein faires Angebot f√ºr seinen Fortnite Account zukommen zu lassen "
            "und damit die M√∂glichkeit zu geben, aus einem alten Fortnite Account noch Geld machen zu k√∂nnen - "
            "w√§hrend man gleichzeitig einem k√ºnftigen K√§ufer eine Freude bereiten kann!\n\n"
            "Wir antworten auf alle Account Anfragen in der Regel innerhalb von wenigen Stunden.\n\n"
            "Sobald wir uns auf einen Preis geeinigt haben, bereiten wir die √úberweisung auf dein Bankkonto direkt vor. "
            "Es ist durchaus m√∂glich, dass das Geld bereits nach wenigen Stunden bei dir ist und wir geben unser Bestes, "
            "um daf√ºr zu sorgen, dass alle Auszahlungen an unsere Verk√§ufer schnellstm√∂glich ausgef√ºhrt werden."
        )

        await asyncio.sleep(1.5)

        await update.message.reply_text(
            "üëã Hallo. Schick uns bitte Deine Angaben in diesem Format:\n"
            "üìú Anzahl der Skins:\n"
            "üíé OG oder seltene Skins:\n"
            "üì∏ Fotos von Deinem Konto\n\n"
            "Du kannst auch die automatische Verifizierungsmethode verwenden und dein Konto " \
            "durch den Skin Checker √ºberpr√ºfen lassen und uns die Fotos zukommen lassen, " \
            "die du vom Bot in Telegram in nur wenigen Sekunden¬†erh√§ltst.\n@BombSkinCheckerBot",
            reply_markup=REVIEW_MARKUP
        )
        return ACCOUNT_INFO
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        return ConversationHandler.END

async def account_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message.text == "üìä Bewertungen":
            await show_reviews(update, context)
            return ACCOUNT_INFO
        u = update.message.from_user
        user_info = f"@{u.username}" if u.username else f"{u.first_name} {u.last_name or ''}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ
        if update.message.photo:
            # –î–ª—è —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "PHOTO:file_id:caption"
            file_id = update.message.photo[-1].file_id
            caption = update.message.caption or ""
            text = f"PHOTO:{file_id}:{caption}"
        else:
            text = update.message.text

        account_id = save_account(u.id, user_info, text)
        
        if not account_id:
            await update.message.reply_text("‚ùå Fehler bei der Bearbeitung der Anfrage. Versuchen Sie es sp√§ter noch einmal.")
            return ConversationHandler.END
        
        await update.message.reply_text("‚úÖ Ich danke Ihnen! Bitte warten Sie auf die Antwort des Administrators.", reply_markup=REVIEW_MARKUP)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫
        topic_id = await create_support_topic(
            context,
            account_id,
            user_info,
            text
        )
        
        if not topic_id:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ #{account_id}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ account_info: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return ConversationHandler.END


async def add_admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.message.from_user.id
        if not is_admin(uid):
            await update.message.reply_text("‚ùå Kein Zugang")
            return
        
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
            return
        
        try:
            new_admin = int(context.args[0])
            add_admin(new_admin)
            await update.message.reply_text(f"‚úÖ {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º")
            await context.bot.send_message(chat_id=new_admin, text="üéâ –í—ã –∞–¥–º–∏–Ω –±–æ—Ç–∞.")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_admin_cmd: {e}")

async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–æ–≤
        if not update.message.message_thread_id:
            return
        
        # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID —Ç–æ–ø–∏–∫–∞
        acc = get_account_by_topic(update.message.message_thread_id)
        if not acc:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not is_admin(update.message.from_user.id):
            await update.message.reply_text("‚ùå Kein Zugang")
            return
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        text = update.message.text or ''
        save_message(acc[0], True, text)
        
        await context.bot.send_message(
            chat_id=acc[1],  # user_id
            text=f"üì® Antwort des Administrators:\n{text}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_reply: {e}")

async def admin_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–æ–≤
        if not update.message.message_thread_id:
            return
        
        # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID —Ç–æ–ø–∏–∫–∞
        acc = get_account_by_topic(update.message.message_thread_id)
        if not acc:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if not is_admin(update.message.from_user.id):
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        caption = update.message.caption or ""
        file_id = update.message.photo[-1].file_id
        save_message(acc[0], True, f"PHOTO:{file_id}:{caption}")
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if caption:
            await context.bot.send_photo(
                chat_id=acc[1],
                photo=file_id,
                caption=f"üì® Antwort des Administrators:\n{caption}"
            )
        else:
            await context.bot.send_photo(
                chat_id=acc[1],
                photo=file_id,
                caption="üì® Antwort des Administrators"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_photo: {e}")

async def user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.message.from_user.id
        if is_admin(uid): 
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        acc = get_active_account(uid)
        if not acc:
            await update.message.reply_text("‚è≥ Warten Sie auf den Administrator.")
            return
        
        acc_id, admin_chat, topic_id = acc
        save_message(acc_id, False, update.message.text)
        
        try:
            await context.bot.send_message(
                chat_id=admin_chat,
                text=f"üë§ User:\n{update.message.text}",
                message_thread_id=topic_id
            )
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            await update.message.reply_text("‚ö†Ô∏è Eine Nachricht an den Administrator konnte nicht gesendet werden")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_message: {e}")

async def user_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.message.from_user.id
        if is_admin(uid): 
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        acc = get_active_account(uid)
        if not acc:
            await update.message.reply_text("‚è≥ Warten Sie auf den Administrator.")
            return
        
        acc_id, admin_chat, topic_id = acc
        caption = update.message.caption or ""
        file_id = update.message.photo[-1].file_id
        save_message(acc_id, False, f"PHOTO:{file_id}:{caption}")
        
        try:
            if caption:
                await context.bot.send_photo(
                    chat_id=admin_chat,
                    photo=file_id,
                    caption=f"üë§ User: {caption}",
                    message_thread_id=topic_id
                )
            else:
                await context.bot.send_photo(
                    chat_id=admin_chat,
                    photo=file_id,
                    caption="üë§ User sent photo",
                    message_thread_id=topic_id
                )
        except Exception as e:
            logger.error(f"Error sending photo: {e}")
            await update.message.reply_text("‚ö†Ô∏è Foto konnte nicht an den Administrator gesendet werden")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_photo: {e}")

# –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
media_groups = {}


async def handle_media_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤)"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        uid = update.message.from_user.id
        if is_admin(uid):
            sender_type = "admin"
            # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏–∑ —Ç–æ–ø–∏–∫–∞
            if not update.message.message_thread_id:
                return
            acc = get_account_by_topic(update.message.message_thread_id)
            if not acc:
                return
            user_id = acc[1]  # user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            sender_type = "user"
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            acc = get_active_account(uid)
            if not acc:
                await update.message.reply_text("‚è≥ Warten Sie auf den Administrator.")
                return
            user_id = None
            admin_chat = acc[1]
            topic_id = acc[2]
        
        # –ü–æ–ª—É—á–∞–µ–º ID –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        media_group_id = update.message.media_group_id
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        if media_group_id not in media_groups:
            media_groups[media_group_id] = {
                "media": [],
                "caption": update.message.caption or "",
                "sender_type": sender_type,
                "user_id": user_id,
                "admin_chat": admin_chat if sender_type == "user" else ADMIN_GROUP_ID,
                "topic_id": topic_id if sender_type == "user" else update.message.message_thread_id,
                "account_id": acc[0] if sender_type == "user" else acc[0],
                "timestamp": update.message.date
            }
            
            # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
            context.job_queue.run_once(
                process_media_group, 
                MEDIA_GROUP_DELAY, 
                data=media_group_id,
                name=f"media_group_{media_group_id}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            media_groups[media_group_id]["media"].append(("photo", file_id))
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –∑–¥–µ—Å—å
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        if sender_type == "user":
            save_message(acc[0], False, f"PHOTO:{file_id}:{update.message.caption or ''}")
        else:
            save_message(acc[0], True, f"PHOTO:{file_id}:{update.message.caption or ''}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_media_group: {e}")

async def process_media_group(context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"""
    job = context.job
    media_group_id = job.data
    
    if media_group_id not in media_groups:
        return
        
    group_data = media_groups[media_group_id]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        media_group = []
        base_caption = ""
        
        if group_data["sender_type"] == "user":
            base_caption = "üë§ User sent album"
            if group_data["caption"]:
                base_caption += f"\n{group_data['caption']}"
        else:
            base_caption = "üì® Antwort des Administrators"
            if group_data["caption"]:
                base_caption += f"\n{group_data['caption']}"
        
        for i, (media_type, file_id) in enumerate(group_data["media"]):
            if i == 0:
                media_item = InputMediaPhoto(media=file_id, caption=base_caption)
            else:
                media_item = InputMediaPhoto(media=file_id)
            media_group.append(media_item)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        if group_data["sender_type"] == "user":
            await context.bot.send_media_group(
                chat_id=group_data["admin_chat"],
                media=media_group,
                message_thread_id=group_data["topic_id"]
            )
        else:
            await context.bot.send_media_group(
                chat_id=group_data["user_id"],
                media=media_group
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –∫—ç—à–∞
        if media_group_id in media_groups:
            del media_groups[media_group_id]

async def admin_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message.message_thread_id:
            return
            
        acc = get_account_by_topic(update.message.message_thread_id)
        if not acc:
            return
            
        if not is_admin(update.message.from_user.id):
            await update.message.reply_text("‚ùå Kein Zugang")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        file_ids = [photo.file_id for photo in update.message.photo]
        caption = update.message.caption or ""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, file_id in enumerate(file_ids):
            save_message(acc[0], True, f"PHOTO:{file_id}:{caption if i == 0 else ''}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        media_group = []
        base_caption = "üì® Antwort des Administrators"
        if caption:
            base_caption += f"\n{caption}"
        
        for i, file_id in enumerate(file_ids):
            if i == 0:
                media_item = InputMediaPhoto(media=file_id, caption=base_caption)
            else:
                media_item = InputMediaPhoto(media=file_id)
            media_group.append(media_item)
        
        await context.bot.send_media_group(
            chat_id=acc[1],
            media=media_group
        )
            
    except Exception as e:
        logger.error(f"Error in admin_album: {e}")

async def user_album(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.message.from_user.id
        if is_admin(uid):
            return
        
        acc = get_active_account(uid)
        if not acc:
            await update.message.reply_text("‚è≥ Warten Sie auf den Administrator.")
            return
            
        acc_id, admin_chat, topic_id = acc
        caption = update.message.caption or ""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        file_ids = [photo.file_id for photo in update.message.photo]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ
        for i, file_id in enumerate(file_ids):
            save_message(acc_id, False, f"PHOTO:{file_id}:{caption if i == 0 else ''}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º InputMediaPhoto
        media_group = []
        base_caption = "üë§ User sent Album"
        if caption:
            base_caption += f"\n{caption}"
        
        for i, file_id in enumerate(file_ids):
            if i == 0:
                media_item = InputMediaPhoto(media=file_id, caption=base_caption)
            else:
                media_item = InputMediaPhoto(media=file_id)
            media_group.append(media_item)
        
        try:
            await context.bot.send_media_group(
                chat_id=admin_chat,
                media=media_group,
                message_thread_id=topic_id
            )
        except Exception as e:
            logger.error(f"Error sending album: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            
    except Exception as e:
        logger.error(f"Error in user_album: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ACCOUNT_INFO
async def invalid_account_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
            "üëã Hallo. Schicken Sie uns Ihre Angaben in diesem Format:\n"
            "üìù Anzahl der Skins:\n"
            "üìù Og oder seltene Skins:\n"
            "üñºÔ∏è Fotos von Ihrem Konto\n\n"
            "Oder Sie k√∂nnen die automatische Verifizierungsmethode verwenden, " \
            "das Konto durch den Checker √ºberpr√ºfen und uns die Fotos schicken, " \
            "die Sie vom Bot in Telegramm erhalten.\n@BombSkinCheckerBot"
    )
    return ACCOUNT_INFO


async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not REVIEW_PHOTOS:
            await update.message.reply_text("‚ö†Ô∏è Keine Bewertungen verf√ºgbar")
            return
        
        try:
            await update.message.delete()
        except:
            logger.warning("Konnte die Nachricht nicht l√∂schen")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–æ–≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π
        media_group = []
        for i, photo_id in enumerate(REVIEW_PHOTOS):
            if i == 0:
                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                media_group.append(InputMediaPhoto(
                    media=photo_id,
                    caption="üìä Bewertungen unserer Kunden:"
                ))
            else:
                media_group.append(InputMediaPhoto(media=photo_id))
        
        await context.bot.send_media_group(
            chat_id=update.message.chat_id,
            media=media_group
        )

    except Exception as e:
        logger.error(f"Fehler in show_reviews: {e}")
        await update.message.reply_text("‚ùå Fehler beim Laden der Bewertungen")


def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    if not ADMIN_GROUP_ID:
        logger.warning("ADMIN_GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_accounts_db()
    init_admins_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    review_handler = MessageHandler(filters.Regex(r'^üìä Bewertungen$'), show_reviews)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ACCOUNT_INFO: [
                MessageHandler(
                    filters.TEXT | filters.PHOTO, 
                    account_info
                )
            ]
        },
        fallbacks=[],
        per_user=True
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_handlers = [
        CommandHandler("addadmin", add_admin_cmd),
        MessageHandler(filters.TEXT & filters.ChatType.SUPERGROUP, admin_reply),
        MessageHandler(filters.PHOTO & filters.ChatType.SUPERGROUP, admin_photo),
        MessageHandler(filters.PHOTO & filters.ChatType.SUPERGROUP, handle_media_group)
    ]
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_message_handlers = [
        MessageHandler(filters.TEXT & ~filters.COMMAND, user_message),
        MessageHandler(filters.PHOTO, user_photo),
        MessageHandler(filters.PHOTO, handle_media_group)
    ]
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handlers([
        *admin_handlers,
        user_conv,
        *user_message_handlers,
        review_handler
    ])
    
    application.run_polling()

if __name__ == "__main__":
    main()
